services:
  # Traefik - reverse proxy
  traefik:
    image: traefik:latest
    container_name: ${stack_name}_traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "$traefik_http_port:80"
      - "$traefik_https_port:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $CONFIGS_DIR/$stack_name/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - $CONFIGS_DIR/$stack_name/traefik/dynamic:/etc/traefik/dynamic:ro
      - $DATA_DIR/$stack_name/traefik/acme:/etc/traefik/acme
    networks:
      - ${stack_name}_network
    depends_on:
      - authentik-server
    labels:
      - "traefik.enable=true"

  # Authentik - database
  postgresql:
    image: postgres:15-alpine
    container_name: ${stack_name}_postgresql
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${postgres_password}
      - POSTGRES_USER=authentik
      - POSTGRES_DB=authentik
    volumes:
      - $DATA_DIR/$stack_name/postgresql:/var/lib/postgresql/data
    networks:
      - ${stack_name}_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d authentik -U authentik"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s

  # Authentik - redis
  redis:
    image: redis:alpine
    container_name: ${stack_name}_redis
    restart: unless-stopped
    networks:
      - ${stack_name}_network
    volumes:
      - $DATA_DIR/$stack_name/redis:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s

  # Authentik - server
  authentik-server:
    image: ghcr.io/goauthentik/server:latest
    container_name: ${stack_name}_authentik_server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: ${postgres_password}
      AUTHENTIK_SECRET_KEY: ${authentik_secret_key}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_PORT_HTTP: 9000
      AUTHENTIK_PORT_HTTPS: 9443
    volumes:
      - $DATA_DIR/$stack_name/authentik/media:/media
      - $DATA_DIR/$stack_name/authentik/custom-templates:/templates
      - $DATA_DIR/$stack_name/authentik/certs:/certs
    ports:
      - "9000:9000"
      - "9443:9443"
    networks:
      - ${stack_name}_network
    depends_on:
      - postgresql
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.rule=Host(\`$domain\`)"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      - "traefik.http.routers.authentik.tls=true"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      - "traefik.http.middlewares.authentik.forwardauth.address=http://authentik-server:9000/outpost.goauthentik.io/auth/traefik"
      - "traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version"

  # Authentik - worker
  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: ${stack_name}_authentik_worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: ${postgres_password}
      AUTHENTIK_SECRET_KEY: ${authentik_secret_key}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
    volumes:
      - $DATA_DIR/$stack_name/authentik/media:/media
      - $DATA_DIR/$stack_name/authentik/custom-templates:/templates
      - $DATA_DIR/$stack_name/authentik/certs:/certs
    networks:
      - ${stack_name}_network
    depends_on:
      - postgresql
      - redis

networks:
  ${stack_name}_network:
    name: ${stack_name}_network
